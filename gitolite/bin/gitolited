#!/usr/bin/env sh

# =====================================================================
# Startup script heavily inspired by eldsoerfer/gitolite Dockerfile
#
# https://registry.hub.docker.com/u/elsdoerfer/gitolite
#
# =====================================================================
# vim: set sw=2:

GIT_HOME="/home/git"

# Always make sure the git user has a private key you may
# use for mirroring setups etc.
if [ ! -f "$GIT_HOME/.ssh/id_rsa" ]; then 
	su git -c "ssh-keygen -f $GIT_HOME/.ssh/id_rsa -t rsa -N '' > /dev/null"
	echo "Here is your private key:"
	su git -c "ssh-keygen -y -f $GIT_HOME/.ssh/id_rsa"
fi

# Support trusting hosts for mirroring setups.
if [ ! -f "$GIT_HOME/.ssh/known_hosts" ]; then 
	if [ -n "$TRUST_HOSTS" ]; then 
		echo "Generating known_hosts file with $TRUST_HOSTS"
		su git -c "ssh-keyscan -H $TRUST_HOSTS > $GIT_HOME/.ssh/known_hosts"
	fi 
fi

if [ ! -d ./.gitolite ] ; then
   # if there is an existing repositories/ folder, it must
   # have been bind-mounted; we need to make sure it has the
   # correct access permissions.
   if [ -d ./repositories ] ; then
       chown -R git:git repositories
   fi

   # gitolite needs to be setup
   if [ -n "$SSH_KEY" ]; then
       echo "Initializing gitolite with key"
       echo "$SSH_KEY" > /tmp/admin.pub
       su git -c "bin/gitolite setup -pk /tmp/admin.pub"
       rm /tmp/admin.pub
   else
       # If no SSH key is given, we instead try to support
       # bootstrapping from an existing gitolite-admin.

       # Unfortunately, gitolite setup will add a new
       # commit to an existing gitolite-admin dir that
       # resets everything. We avoid this by renaming it first.
       if [ -d ./repositories/gitolite-admin.git ]; then
           mv ./repositories/gitolite-admin.git ./repositories/gitolite-admin.git-tmp
       fi

       # First, setup gitolite without an ssh key.
       # My understanding is that this is essentially a noop,
       # auth-wise. setup will still generate the .gitolite
       # folder and .gitolite.rc files.
       echo "Initializing gitolite without a key"
       su git -c "bin/gitolite setup -a dummy"

       # Remove the gitolite-admin repo generated by setup.
       if [ -d ./repositories/gitolite-admin.git-tmp ]; then
           rm -rf ./repositories/gitolite-admin.git
           mv ./repositories/gitolite-admin.git-tmp ./repositories/gitolite-admin.git
       fi

       # Apply config customizations. We need to do this now,
       # because w/o the right config, the compile may fail.
       rcfile=$GIT_HOME/.gitolite.rc
       sed -i "s/GIT_CONFIG_KEYS.*=>.*''/GIT_CONFIG_KEYS => \"${GIT_CONFIG_KEYS}\"/g" $rcfile
       if [ -n "$LOCAL_CODE" ]; then
           sed -i "s|# LOCAL_CODE.*=>.*$|LOCAL_CODE => \"${LOCAL_CODE}\",|" $rcfile
       fi

       # We will need to update authorized_keys based on
       # the gitolite-admin repo. The way to do this is by
       # triggering the post-update hook of the gitolite-admin
       # repo (thanks to sitaram for the solution):
       su git -c "cd $GIT_HOME/repositories/gitolite-admin.git && \
				 GL_LIBDIR=$($GIT_HOME/bin/gitolite query-rc GL_LIBDIR) \
				 PATH=$PATH:$GIT_HOME/bin hooks/post-update refs/heads/master"
   fi
else
    # Resync on every restart
    su git -c "bin/gitolite setup"
fi

# Tails logs to stdout
tail -f $GIT_HOME/.gitolite/logs/* &

# Starting SSH daemon
exec /usr/sbin/sshd -D 

